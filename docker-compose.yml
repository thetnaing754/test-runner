#version: "3.9"

#services:
  #app:
    #build: .
    #container_name: test-runner
    #ports:
    #  - "3000:3000"
    #volumes:
    #  - .:/app      # Mount project folder (for dev)
    #  - /app/node_modules
    #command: node src/index.js

version: "3.9"

services:
  # SonarQube service
  sonarqube:
    image: sonarqube:community
    container_name: sonarqube
    hostname: sonarqube
    read_only: true
    depends_on:
      db:
        condition: service_healthy
    environment:
      SONAR_JDBC_URL: jdbc:postgresql://db:5432/sonar
      SONAR_JDBC_USERNAME: sonar
      SONAR_JDBC_PASSWORD: sonar
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
      - sonarqube_logs:/opt/sonarqube/logs
      - sonarqube_temp:/opt/sonarqube/temp
    ports:
      - "9000:9000"
    networks:
      - ipv4

  # PostgreSQL service for SonarQube
  db:
    image: postgres:17
    container_name: postgresql
    hostname: postgresql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      POSTGRES_USER: sonar
      POSTGRES_PASSWORD: sonar
      POSTGRES_DB: sonar
    volumes:
      - postgresql:/var/lib/postgresql/data
    networks:
      - ipv4

  # Sonar Scanner service to run analysis
  scanner:
    image: sonarsource/sonar-scanner-cli
    container_name: sonar-scanner
    depends_on:
      - sonarqube
    working_dir: /usr/src
    volumes:
      - ./your-nodejs-project:/usr/src   # Replace with your actual Node.js project path
    environment:
      SONAR_HOST_URL: "http://192.168.49.7:9000"
      SONAR_LOGIN: "sqp_91369be10cbba8bfccf9ce866574544f34f8a02e"
    networks:
      - ipv4

volumes:
  sonarqube_data:
  sonarqube_extensions:
  sonarqube_logs:
  sonarqube_temp:
  postgresql:

networks:
  ipv4:
    driver: bridge
    enable_ipv6: false
